########################################################################
#
# Use of IPM for population viability analysis 
#
###########################################################################
#
# IPM workshop Aberdeen June 2018
#
###########################################################################
#
# MS, 30 August 17
#
###########################################################################

# Load data

setwd("..")

load("Data PVA.Rdata")

# Look at data
ls()


disc.unif <- function(A, B){
   pprob <- c(rep(0, A-1), rep(1/(B-A+1), (B-A+1)))
   return(pprob)
   }


########################

# First step: develop the IPM for the data



# Write BUGS model file
cat(file = "ipm.pva.jags", "
model { 

# Priors and constraints
mean.logit.sj <- logit(mean.sj)
mean.sj ~ dunif(0, 1) 
mean.logit.sa <- logit(mean.sa)
mean.sa ~ dunif(0, 1) 
mean.p ~ dunif(0, 1)
mean.log.f <- log(mean.f)
mean.f ~ dunif(0, 10)

for (t in 1:(n.occasions-1)){
   p[t] <- mean.p
   }

for (t in 1:(n.occasions-1)){             
   logit.sj[t] <- mean.logit.sj + eps.sj[t]
   eps.sj[t] ~ dnorm(0, tau.sj)
   sj[t] <- ilogit(logit.sj[t])         # back transformation from logit scale
   logit.sa[t] <- mean.logit.sa + eps.sa[t]
   eps.sa[t] ~ dnorm(0, tau.sa)
   sa[t] <- ilogit(logit.sa[t])
   }

for (t in 1:(n.occasions)){   # extended loop also here
   log.f[t] <- mean.log.f + eps.f[t]
   eps.f[t] ~ dnorm(0, tau.f)
   f[t] <- exp(log.f[t])         # back transformation from log scale
   }

sigma.sj ~ dunif(0, 10)
tau.sj <- pow(sigma.sj, -2)
sigma.sa ~ dunif(0, 10)
tau.sa <- pow(sigma.sa, -2)
sigma.f ~ dunif(0, 10)
tau.f <- pow(sigma.f, -2)

sigma.obs ~ dunif(0.5, 50)
tau.obs <- pow(sigma.obs, -2)

# State-space model for count data
# Model for the initial population size
N[1,1] ~ dcat(pNinit[])
N[2,1] ~ dcat(pNinit[])

# Process model over time
for (t in 1:(n.occasions-1)){  
   N[1,t+1] ~ dpois(sj[t] * f[t] * (N[1,t] + N[2,t])) 
   N[2,t+1] ~ dbin(sa[t], (N[1,t] + N[2,t]))
   }

# Observation model
for (t in 1:n.occasions){
   count[t] ~ dnorm(N[1,t] + N[2,t], tau.obs)
   }

# Poisson regression model for productivity data
for (t in 1:n.occasions){
   J[t] ~ dpois(f[t] * B[t])
   }

# Capture-recapture model (multinomial likelihood)
# Define the multinomial likelihood
for (t in 1:(n.occasions-1)){
   marr.j[t,1:n.occasions] ~ dmulti(pr.j[t,], rel.j[t])
   marr.a[t,1:n.occasions] ~ dmulti(pr.a[t,], rel.a[t])
   }
# Define the cell probabilities of the m-arrays
# Main diagonal
for (t in 1:(n.occasions-1)){
   q[t] <- 1-p[t]   # Probability of non-recapture
   pr.j[t,t] <- sj[t]*p[t]
   pr.a[t,t] <- sa[t]*p[t]
   # Above main diagonal
   for (j in (t+1):(n.occasions-1)){
      pr.j[t,j] <- sj[t]*prod(sa[(t+1):j])*prod(q[t:(j-1)])*p[j]
      pr.a[t,j] <- prod(sa[t:j])*prod(q[t:(j-1)])*p[j]
      } #j
   # Below main diagonal
   for (j in 1:(t-1)){
      pr.j[t,j] <- 0
      pr.a[t,j] <- 0
      } #j
   } #t
# Last column: probability of non-recapture
for (t in 1:(n.occasions-1)){
   pr.j[t,n.occasions] <- 1-sum(pr.j[t,1:(n.occasions-1)])
   pr.a[t,n.occasions] <- 1-sum(pr.a[t,1:(n.occasions-1)])
   } #t

# Derived parameters
# Total population size
for (t in 1:(n.occasions)){
   Ntot[t] <- N[1,t] + N[2,t]
   }
}
")


# Bundle data
bugs.data <- list(marr.j = marr.j, marr.a = marr.a, n.occasions = ncol(marr.j), rel.j = rowSums(marr.j), rel.a = rowSums(marr.a), J = J, B = B, count = count, pNinit = disc.unif(1, 50))

# Initial values
inits <- function(){list(mean.sj = runif(1, 0, 0.5), mean.sa = runif(1, 0.4, 0.6), mean.f = runif(1, 1.3, 2))}

# Parameters monitored
parameters <- c("mean.sj", "sj", "sigma.sj", "mean.sa", "sa", "sigma.sa", "mean.p", "mean.f", "f", "sigma.f", "sigma.obs", "N", "Ntot")

# MCMC settings
ni <- 3000; nt <- 1; nb <- 1000; nc <- 3

# Call JAGS from R (jagsUI), check convergence and summarize posteriors
ipm <- jags(bugs.data, inits, parameters, "ipm.pva.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb)

# Check convergence and print results
par(mfrow = c(3, 3));  traceplot(ipm)
print(ipm, 3)


###########################


# Second step: 
# - extend the model such that the population size and the demographic parameters are forcasted
# - add the calculation of the extinction probability


# Write BUGS model file
cat(file = "ipm.pvaI.jags", "
model { 

# Priors and constraints
mean.logit.sj <- logit(mean.sj)
mean.sj ~ dunif(0, 1) 
mean.logit.sa <- logit(mean.sa)
mean.sa ~ dunif(0, 1) 
mean.p ~ dunif(0, 1)
mean.log.f <- log(mean.f)
mean.f ~ dunif(0, 10)

for (t in 1:(n.occasions-1)){
   p[t] <- mean.p
   }

for (t in 1:(n.occasions-1+K)){              # here we extend the loop to K more years
   logit.sj[t] <- mean.logit.sj + eps.sj[t]
   eps.sj[t] ~ dnorm(0, tau.sj)
   sj[t] <- ilogit(logit.sj[t])
   logit.sa[t] <- mean.logit.sa + eps.sa[t]
   eps.sa[t] ~ dnorm(0, tau.sa)
   sa[t] <- ilogit(logit.sa[t])
   }

for (t in 1:(n.occasions+K)){                # extended loop also here
   log.f[t] <- mean.log.f + eps.f[t]
   eps.f[t] ~ dnorm(0, tau.f)
   f[t] <- exp(log.f[t])
   }

sigma.sj ~ dunif(0, 10)
tau.sj <- pow(sigma.sj, -2)
sigma.sa ~ dunif(0, 10)
tau.sa <- pow(sigma.sa, -2)
sigma.f ~ dunif(0, 10)
tau.f <- pow(sigma.f, -2)

sigma.obs ~ dunif(0.5, 50)
tau.obs <- pow(sigma.obs, -2)

# State-space model for count data
# Model for the initial population size
N[1,1] ~ dcat(pNinit[])
N[2,1] ~ dcat(pNinit[])

# Process model over time
for (t in 1:(n.occasions-1+K)){               # extended loop here
   N[1,t+1] ~ dpois(sj[t] * f[t] * (N[1,t] + N[2,t])) 
   N[2,t+1] ~ dbin(sa[t], (N[1,t] + N[2,t]))
   }

# Observation model
for (t in 1:n.occasions){
   count[t] ~ dnorm(N[1,t] + N[2,t], tau.obs)
   }

# Poisson regression model for productivity data
for (t in 1:n.occasions){
   J[t] ~ dpois(f[t] * B[t])
   }

# Capture-recapture model (multinomial likelihood)
# Define the multinomial likelihood
for (t in 1:(n.occasions-1)){
   marr.j[t,1:n.occasions] ~ dmulti(pr.j[t,], rel.j[t])
   marr.a[t,1:n.occasions] ~ dmulti(pr.a[t,], rel.a[t])
   }
# Define the cell probabilities of the m-arrays
# Main diagonal
for (t in 1:(n.occasions-1)){
   q[t] <- 1-p[t]   # Probability of non-recapture
   pr.j[t,t] <- sj[t]*p[t]
   pr.a[t,t] <- sa[t]*p[t]
   # Above main diagonal
   for (j in (t+1):(n.occasions-1)){
      pr.j[t,j] <- sj[t]*prod(sa[(t+1):j])*prod(q[t:(j-1)])*p[j]
      pr.a[t,j] <- prod(sa[t:j])*prod(q[t:(j-1)])*p[j]
      } #j
   # Below main diagonal
   for (j in 1:(t-1)){
      pr.j[t,j] <- 0
      pr.a[t,j] <- 0
      } #j
   } #t
# Last column: probability of non-recapture
for (t in 1:(n.occasions-1)){
   pr.j[t,n.occasions] <- 1-sum(pr.j[t,1:(n.occasions-1)])
   pr.a[t,n.occasions] <- 1-sum(pr.a[t,1:(n.occasions-1)])
   } #t

# Derived parameters
# Total population size
for (t in 1:(n.occasions+K)){              # extended loop here
   Ntot[t] <- N[1,t] + N[2,t]
   }
# Check whether the population goes extinct in future
for (t in 1:K){
   extinct[t] <- equals(Ntot[n.occasions+t], 0)  
   }
}
")


# Bundle data
K <- 15                         # Number of years with predictions
bugs.data <- list(marr.j = marr.j, marr.a = marr.a, n.occasions = ncol(marr.j), rel.j = rowSums(marr.j), rel.a = rowSums(marr.a), J = J, B = B, count = count, pNinit = disc.unif(1, 50), K = K)

# Initial values
inits <- function(){list(mean.sj = runif(1, 0, 0.5), mean.sa = runif(1, 0.4, 0.6), mean.f = runif(1, 1.3, 2))}

# Parameters monitored
parameters <- c("mean.sj", "sj", "sigma.sj", "mean.sa", "sa", "sigma.sa", "mean.p", "mean.f", "f", "sigma.f", "sigma.obs", "N", "Ntot", "extinct")

# MCMC settings
ni <- 3000; nt <- 1; nb <- 1000; nc <- 3

# Call JAGS from R (jagsUI), check convergence and summarize posteriors
ipm.pvaI <- jags(bugs.data, inits, parameters, "ipm.pvaI.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb)

# Check convergence and print results
par(mfrow = c(3, 3));  traceplot(ipm.pvaI)
print(ipm.pvaI, 3)


# Make graphs
n.years <- length(ipm.pvaI$mean$Ntot)

par(mfrow = c(2, 2), mar = c(4.5, 4, 1, 1), cex = 1.1)
plot(0, 0, ylim = range(c(ipm.pvaI$q2.5$Ntot, ipm.pvaI$q97.5$Ntot)), xlim = c(0.5, n.years), ylab = "Total population size", xlab = "Year", las = 1, col = "black", type = "l", lwd = 2, frame = FALSE, axes = FALSE)
axis(2, las = 1)
axis(1, at = seq(1, n.years, 3), labels = seq(1, n.years, 3))
axis(1, at = 1:n.years, labels = rep("", n.years), tcl = -0.25)
polygon(x = c(1:n.years, n.years:1), y = c(ipm.pvaI$q2.5$Ntot, ipm.pvaI$q97.5$Ntot[n.years:1]), col = "gray90", border = "gray90")
points(ipm.pvaI$q50$Ntot, type = "l", col = "blue", lwd = 2)

plot(ipm.pvaI$mean$f, ylim = range(c(ipm.pvaI$q2.5$f, ipm.pvaI$q97.5$f)), xlim = c(0.5, n.years), ylab = "Productivity", xlab = "Year", las = 1, col = "black", type = "l", lwd = 2, frame = FALSE, axes = FALSE)
axis(2, las = 1)
axis(1, at = seq(1, n.years, 3), labels = seq(1, n.years, 3))
axis(1, at = 1:n.years, labels = rep("", n.years), tcl = -0.25)
polygon(x = c(1:n.years, n.years:1), y = c(ipm.pvaI$q2.5$f, ipm.pvaI$q97.5$f [n.years:1]), col = "gray90", border = "gray90")
points(ipm.pvaI$mean$f, type = "l", col = "blue", lwd = 2)

plot(ipm.pvaI$mean$sj, ylim = range(c(ipm.pvaI$q2.5$sj, ipm.pvaI$q97.5$sj)), xlim = c(0.5, n.years), ylab = "Juvenile survival", xlab = "Year", las = 1, col = "black", type = "l", lwd = 2, frame = FALSE, axes = FALSE)
axis(2, las = 1)
axis(1, at = seq(1, n.years-1, 3), labels = seq(1, n.years-1, 3))
axis(1, at = 1:(n.years-1), labels = rep("", n.years-1), tcl = -0.25)
polygon(x = c(1:(n.years-1), (n.years-1):1), y = c(ipm.pvaI$q2.5$sj, ipm.pvaI$q97.5$sj [(n.years-1):1]), col = "gray90", border = "gray90")
points(ipm.pvaI$mean$sj, type = "l", col = "blue", lwd = 2)

plot(ipm.pvaI$mean$sa, ylim = range(c(ipm.pvaI$q2.5$sa, ipm.pvaI$q97.5$sa)), xlim = c(0.5, n.years), ylab = "Adult survival", xlab = "Year", las = 1, col = "black", type = "l", lwd = 2, frame = FALSE, axes = FALSE)
axis(2, las = 1)
axis(1, at = seq(1, n.years-1, 3), labels = seq(1, n.years-1, 3))
axis(1, at = 1:(n.years-1), labels = rep("", n.years-1), tcl = -0.25)
polygon(x = c(1:(n.years-1), (n.years-1):1), y = c(ipm.pvaI$q2.5$sa, ipm.pvaI$q97.5$sa [(n.years-1):1]), col = "gray90", border = "gray90")
points(ipm.pvaI$mean$sa, type = "l", col = "blue", lwd = 2)


# Plot with cumulative extinction probability
plot(ipm.pvaI$mean$extinct, type = "l", ylab = "Cumulative extinction probability", lwd = 3, xlab = "Year", frame = FALSE, axes = FALSE)
axis(1, at = 1:K, tck = -0.0125, labels = FALSE)
axis(1, at = c(1, 3, 5, 7, 9, 11, 13, 15), labels = c(1, 3, 5, 7, 9, 11, 13, 15), tck = -0.025)
axis(2, las = 1)
abline(h = 0.05, col = "red", lwd = 3)


# Plot with cumulative extinction probability with different extinction thresholds
D <- c(1, 3, 5, 7)
T <- length(count)
color <- colorRampPalette(c("blue", "red"))(4)
plot(y = rep(0,K), x = 1:K, type = "n", ylim = c(0, 0.5), ylab = "Quasi-extinction probability", xlab = "Year", axes = F)
axis(2, las = 1)
axis(1, at = 1:K, tck = -0.0125, labels = FALSE)
axis(1, at = c(1, 3, 5, 7, 9, 11, 13, 15), labels = c(1, 3, 5, 7, 9, 11, 13, 15), tck = -0.025)
qextinct <- matrix(0, ncol = K, nrow = length(ipm.pvaI$sims.list$deviance))
for (i in 1:length(D)){
   qextinct[ipm.pvaI$sims.list$Ntot[,(T+1):(T+K)] <= D[i]] <- 1
   points(apply(qextinct, 2, mean), type = "l", lwd = 2, col = color[i])
   }
legend("topleft", legend = c("D = 1", "D = 3", "D = 5", "D = 7"), col = color, lwd = 2, bty = "n")



# Probability that the population in 15 years will be smaller than the one 
mean(ipm.pvaI$sims.list$Ntot[,T] > ipm.pvaI$sims.list$Ntot[,T+K])


############

# Compare different management options

############

# 3 additional options
# i) a reduction of nest predation by crows (Corvidae) with the effect of a 20% increase in the number of fledglings,
# ii) a reduction of the temporal variability of adult survival by half, and 
# iii) the release of 3 breeding pairs during 5 years, i.e. translocations. 
# iv) do nothing (as comparison)

# Bundle data
K <- 15                         # Number of years with predictions
n.occasions <- ncol(marr.j)     # Number of study years
bugs.data <- list(marr.j = marr.j, marr.a = marr.a, n.occasions = n.occasions, rel.j = rowSums(marr.j), rel.a = rowSums(marr.a), J = J, B = B, count = count, pNinit = disc.unif(1, 50), K = K)


# Write BUGS model file
cat(file = "ipm.pvaII.txt", "
model { 
# Priors and constraints
mean.logit.sj <- logit(mean.sj)
mean.sj ~ dunif(0, 1) 
mean.logit.sa <- logit(mean.sa)
mean.sa ~ dunif(0, 1) 
mean.p ~ dunif(0, 1)
mean.log.f <- log(mean.f)
mean.f ~ dunif(0, 10)

for (t in 1:(n.occasions-1)){
   p[t] <- mean.p
   }

sigma.sj ~ dunif(0, 10)
tau.sj <- pow(sigma.sj, -2)
sigma.sa ~ dunif(0, 10)
tau.sa <- pow(sigma.sa, -2)
sigma.f ~ dunif(0, 10)
tau.f <- pow(sigma.f, -2)

sigma.obs ~ dunif(0.5, 50)
tau.obs <- pow(sigma.obs, -2)

# Models for demographic rates
# Scenario 1: no change
for (t in 1:(n.occasions-1+K)){
   logit.sj[t] <- mean.logit.sj + eps.sj[t]
   eps.sj[t] ~ dnorm(0, tau.sj)
   sj[t] <- ilogit(logit.sj[t])
   logit.sa[t,1] <- mean.logit.sa + eps.sa[t,1]
   eps.sa[t,1] ~ dnorm(0, tau.sa)
   sa[t,1] <- ilogit(logit.sa[t,1])
   }
for (t in 1:(n.occasions+K)){
   log.f[t,1] <- mean.log.f + eps.f[t,1]
   eps.f[t,1] ~ dnorm(0, tau.f)
   f[t,1] <- exp(log.f[t,1])
   }

# Scenario 2: increase of productivity
# Past: identical to scenario 1
for (t in 1:n.occasions){      
   log.f[t,2] <- log.f[t,1]
   eps.f[t,2] <- eps.f[t,1]
   f[t,2] <- f[t,1]
   }
# Future : increase mean productivity by 20%
for (t in (n.occasions+1):(n.occasions+K)){
   log.f[t,2] <- mean.log.f + log(1.2) + eps.f[t,2]
   eps.f[t,2] ~ dnorm(0, tau.f)
   f[t,2] <- exp(log.f[t,2])
   }

# Scenario 3: reduction of temporal variability in adult survival
# Past: identical to scenario 1
for (t in 1:(n.occasions-1)){   
   logit.sa[t,2] <- logit.sa[t,1]
   eps.sa[t,2] <- eps.sa[t,1]
   sa[t,2] <- sa[t,1]
   }
# Future: reduction of temporal variability by half
for (t in n.occasions:(n.occasions-1+K)){    
   logit.sa[t,2] <- mean.logit.sa + eps.sa[t,2]
   eps.sa[t,2] ~ dnorm(0, tau.sa*2)     # temporal precision increased
   sa[t,2] <- ilogit(logit.sa[t,2])
   }


# State-space model for count data
N[1,1,1] ~ dcat(pNinit[])
N[2,1,1] ~ dcat(pNinit[])

# Scenario 1: no change
# Process model over time (past and future)
for (t in 1:(n.occasions-1+K)){
   N[1,t+1,1] ~ dpois(f[t,1] * sj[t] * (N[1,t,1] + N[2,t,1]))
   N[2,t+1,1] ~ dbin(sa[t,1], (N[1,t,1] + N[2,t,1]))
   }

# Scenario 2: increase of productivity
# Past
for (t in 1:n.occasions){
   N[1,t,2] <- N[1,t,1]
   N[2,t,2] <- N[2,t,1]
   }
# Future
for (t in n.occasions:(n.occasions-1+K)){
   N[1,t+1,2] ~ dpois(f[t,2] * sj[t] * (N[1,t,2] + N[2,t,2]))
   N[2,t+1,2] ~ dbin(sa[t,1], (N[1,t,2] + N[2,t,2]))
   }

# Scenario 3: decrease of temporal var. in adult survival
# Past
for (t in 1:n.occasions){
   N[1,t,3] <- N[1,t,1]
   N[2,t,3] <- N[2,t,1]
   }
# Future
for (t in n.occasions:(n.occasions-1+K)){
   N[1,t+1,3] ~ dpois(f[t,1] * sj[t] * (N[1,t,3] + N[2,t,3]))
   N[2,t+1,3] ~ dbin(sa[t,2], (N[1,t,3] + N[2,t,3]))
   }

# Scenario 4: release of 3 females annually during 5 years
# Past
for (t in 1:n.occasions){
   N[1,t,4] <- N[1,t,1]
   N[2,t,4] <- N[2,t,1]
   }
# Future, phase with releases
for (t in n.occasions:(n.occasions+5)){
   N[1,t+1,4] ~ dpois(f[t,1] * sj[t] * (N[1,t,4] + N[2,t,4] + 3))
   N[2,t+1,4] ~ dbin(sa[t,1], (N[1,t,4] + N[2,t,4] + 3))
   }
# Future, after the phase with releases
for (t in (n.occasions+6):(n.occasions-1+K)){
   N[1,t+1,4] ~ dpois(f[t,1] * sj[t] * (N[1,t,4] + N[2,t,4]))
   N[2,t+1,4] ~ dbin(sa[t,1], (N[1,t,4] + N[2,t,4]))
   }

# Observation model
for (t in 1:n.occasions){
   count[t] ~ dnorm(N[1,t,1] + N[2,t,1], tau.obs)
   }

# Poisson regression model for productivity data
for (t in 1:n.occasions){
   J[t] ~ dpois(f[t,1]*B[t])
   }

# Capture-recapture model (multinomial likelihood)
# Define the multinomial likelihood
for (t in 1:(n.occasions-1)){
   marr.j[t,1:n.occasions] ~ dmulti(pr.j[t,], rel.j[t])
   marr.a[t,1:n.occasions] ~ dmulti(pr.a[t,], rel.a[t])
   }
# Define the cell probabilities of the m-arrays
# Main diagonal
for (t in 1:(n.occasions-1)){
   q[t] <- 1-p[t]   # Probability of non-recapture
   pr.j[t,t] <- sj[t]*p[t]
   pr.a[t,t] <- sa[t,1]*p[t]
   # Above main diagonal
   for (j in (t+1):(n.occasions-1)){
      pr.j[t,j] <- sj[t]*prod(sa[(t+1):j,1])*prod(q[t:(j-1)])*p[j]
      pr.a[t,j] <- prod(sa[t:j,1])*prod(q[t:(j-1)])*p[j]
      } #j
   # Below main diagonal
   for (j in 1:(t-1)){
      pr.j[t,j] <- 0
      pr.a[t,j] <- 0
      } #j
   } #t
# Last column: probability of non-recapture
for (t in 1:(n.occasions-1)){
   pr.j[t,n.occasions] <- 1-sum(pr.j[t,1:(n.occasions-1)])
   pr.a[t,n.occasions] <- 1-sum(pr.a[t,1:(n.occasions-1)])
   } #t

# Derived parameters
for (t in 1:(n.occasions+K)){
   Ntot[t,1] <- N[1,t,1] + N[2,t,1]     # Total population sizes scenario 1
   Ntot[t,2] <- N[1,t,2] + N[2,t,2]     # Total population sizes scenario 2
   Ntot[t,3] <- N[1,t,3] + N[2,t,3]     # Total population sizes scenario 3
   Ntot[t,4] <- N[1,t,4] + N[2,t,4]     # Total population sizes scenario 4
   }
}
")


# Initial values
inits <- function(){list(mean.sj = runif(1, 0, 0.5), mean.sa = runif(1, 0.4, 0.6), mean.f = runif(1, 1.3, 2))}

# Parameters monitored
parameters <- c("mean.sj", "sj", "sigma.sj", "mean.sa", "sa", "sigma.sa", "mean.p", "mean.f", "f", "sigma.f", "N", "Ntot", "sigma.obs")

# MCMC settings
ni <- 3000; nt <- 1; nb <- 1000; nc <- 3

# Call JAGS from R (jagsUI)
ipm.pvaII <- jags(bugs.data, inits, parameters, "ipm.pvaII.txt", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb)



# To compare the different scenarios, we compute the quasi-extinction probabilities using a threshold of D = 3 for each scenario (note that this represents 3 pairs in our female-based model), and produce a graph with the cumulative quasi-extinction probabilities 

D <- 3
T <- length(count)
qextinct1 <- qextinct2 <- qextinct3  <- qextinct4 <- matrix(0, ncol = K, nrow = length(ipm.pvaII$sims.list$deviance))
qextinct1[ipm.pvaII$sims.list$Ntot[,(T+1):(T+K),1] <= D] <- 1
qextinct2[ipm.pvaII$sims.list$Ntot[,(T+1):(T+K),2] <= D] <- 1
qextinct3[ipm.pvaII$sims.list$Ntot[,(T+1):(T+K),3] <= D] <- 1
qextinct4[ipm.pvaII$sims.list$Ntot[,(T+1):(T+K),4] <= D] <- 1

color <- colorRampPalette(c("blue", "red"))(4)
par(las = 1)
plot(apply(qextinct1, 2, mean), type = "l", ylab = "Quasi-extinction probability", lwd = 2, xlab = "Year", frame = FALSE, axes = FALSE, col = color[1])
axis(1, at = 1:K, tck = -0.0125, labels = FALSE)
axis(1, at = c(1, 3, 5, 7, 9, 11, 13, 15), labels = c(1, 3, 5, 7, 9, 11, 13, 15), tck = -0.025)
axis(2)
lines(apply(qextinct2, 2, mean), type = "l", lwd = 2, col = color[2])
lines(apply(qextinct3, 2, mean), type = "l", lwd = 2, col = color[3])
lines(apply(qextinct4, 2, mean), type = "l", lwd = 2, col = color[4])
legend("topleft", lty = rep(1, 4), lwd = rep(2, 4), col = color, legend = c("Do nothing", "Increased productivity", "Reduced variability", "Translocation"), bty = "n")



# Rank the different scenarios by computing the probability that a given scenario with a management action produces a larger population size in 15 years compared to the control scenario where no action is taken.  

mean(ipm.pvaII$sims.list$Ntot[,n.occasions+K,2] > ipm.pvaII$sims.list$Ntot[,n.occasions+K,1])

mean(ipm.pvaII$sims.list$Ntot[,n.occasions+K,3] > ipm.pvaII$sims.list$Ntot[,n.occasions+K,1])

mean(ipm.pvaII$sims.list$Ntot[,n.occasions+K,4] > ipm.pvaII$sims.list$Ntot[,n.occasions+K,1])

